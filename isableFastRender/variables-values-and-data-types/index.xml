<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Variables, Values, and Data Types on Zen</title>
    <link>http://localhost:1313/zen-website/variables-values-and-data-types/</link>
    <description>Recent content in Variables, Values, and Data Types on Zen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://localhost:1313/zen-website/variables-values-and-data-types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Declaring Final Variables or Constants</title>
      <link>http://localhost:1313/zen-website/variables-values-and-data-types/declaring-final-variables-or-constants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/variables-values-and-data-types/declaring-final-variables-or-constants/</guid>
      <description>In this section, you will learn how to declare final variables or constants.
A final variable is variable that you cannot change after initializing. The compiler will generate errors if you try to change it. It is also called as a constant.
The basic form of a constant declaration statement is shown here.
final name = expression  The primary difference between declaring a variable and a constant is the use of final keyword.</description>
    </item>
    
    <item>
      <title>Declaring Variables</title>
      <link>http://localhost:1313/zen-website/variables-values-and-data-types/declaring-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/variables-values-and-data-types/declaring-variables/</guid>
      <description>In this lecture, you will learn how to declare variables.
You must declare a variable before using it. The compiler will display errors otherwise.
The basic form of a variable declaration statement is shown below.
var name  A variable name is an identifier. You can refer the value stored in the variable with its name.
Unlike other statically typed programming languages, you don&amp;rsquo;t have to write the type of values that can be stored in a variable.</description>
    </item>
    
    <item>
      <title>Understanding Data Types</title>
      <link>http://localhost:1313/zen-website/variables-values-and-data-types/understanding-data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/variables-values-and-data-types/understanding-data-types/</guid>
      <description>Zen is a dynamically typed programming language. What this means is, the compiler does not know the type of every variable. Once you declare a variable, it can hold values of any type. For example, a variable referencing an integer may be updated to reference a string without making the compiler complain.
The advantage of dynamically typed languages is that programs can be written quickly. On the other hand, the primary disadvantage of a dynamically typed language is that many bugs cannot be caught during compilation.</description>
    </item>
    
    <item>
      <title>Understanding Unicode</title>
      <link>http://localhost:1313/zen-website/variables-values-and-data-types/understanding-unicode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/variables-values-and-data-types/understanding-unicode/</guid>
      <description>This section describes Unicode and how Zen deals with it. It is a difficult concept to grasp. You can safely skip this section for now. You can come back when you are comfortable with Zen.
 To work with characters in a computer, you need the following:
* Character Repertoire
* Character Set
* Character Encoding
Understanding Characters Repertoire A character repertoire is a collection of characters your computer can work with.</description>
    </item>
    
    <item>
      <title>Understanding Variables</title>
      <link>http://localhost:1313/zen-website/variables-values-and-data-types/understanding-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/variables-values-and-data-types/understanding-variables/</guid>
      <description>In this section, you will learn about variables.
A variable is a place holder. A variable&amp;rsquo;s value can change when your program is running.
For exampe, you can store a value like 100 in a variable. After you store a value, you can store a different value in the variable whenever you want. When you store a new value in a variable, the old value is no longer there. In other words, the old value is replaced by the new value.</description>
    </item>
    
    <item>
      <title>Working with Non-Primitive Reference Types</title>
      <link>http://localhost:1313/zen-website/variables-values-and-data-types/working-with-non-primitive-reference-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/variables-values-and-data-types/working-with-non-primitive-reference-types/</guid>
      <description>In this section, you will learn about the basics of non-primitive reference types. You learn to create variables that work with objects.
The rules that apply to these types also apply to primitive reference types.
 You will learn more about classes and objects later in the course.
 Zen programs are built with classes. You can use classes to create objects. A class can either be a part of the Zen standard API or a class that you create.</description>
    </item>
    
    <item>
      <title>Working with Primitive Reference Types</title>
      <link>http://localhost:1313/zen-website/variables-values-and-data-types/working-with-primitive-reference-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/variables-values-and-data-types/working-with-primitive-reference-types/</guid>
      <description>The primitive types are the most basic data types available in the Zen Virtual Machine.
There are eight primitive data types defined by the Zen Virtual Machine.
* boolean
* char
* integer8
* integer16
* integer32
* integer64
* decimal32
* decimal64
The primitive types are not reference types. Since the Zen programming language supports only primitive types, it adds wrappers around these primitive types through wrapper classes.</description>
    </item>
    
    <item>
      <title>Working with Strings</title>
      <link>http://localhost:1313/zen-website/variables-values-and-data-types/working-with-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/variables-values-and-data-types/working-with-strings/</guid>
      <description>In this section, you will learn the basics of strings.
A string is a sequence of characters. String literals are enclosed in single quotes (&#39;).
Here&amp;rsquo;s an example of a string.
&#39;Hello, world!&#39;  The Zen Virtual Machine does not define string as a primitive type. Further, the Zen programming language treats strings specially and classifies a string as primitive reference type. It is implemented by the zen.core.String class.</description>
    </item>
    
  </channel>
</rss>