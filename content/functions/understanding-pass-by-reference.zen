+++
title = "Understanding Pass-By-Reference"
weight = 12
+++

When you pass a reference value, such as objects and arrays, as an argument to
a function, the function receives a copy of the reference. In other words, the object
itself is not copied when you pass it as an argument, only its reference is copied.

Similarly, when you pass a variable that contains a reference to an object as an
argument to a function, the function receives a copy of the reference, not the the
variable itself.

This technique is called pass-by-reference. It is applied when you pass reference
values, such as objects and arrays.

Therefore, if a function changes the reference it received through the parameter,
it is not reflected in the original variable that was passed to the function.

However, if the object is modified through the reference, then the change is
reflected in the object. Because both the argument and the parameter refer to
the same object, and not separate copies of the object.

Consider the following example.

```
// PassByReferenceDemo.zen

class Square

    var side

function main(...arguments)
    var square = new Square()
    square.side = 5
    
    printf('[before] square in main contains side = %d\n", square.side)
    changeValue(square)
    printf("[after] square in main contains side %d\n", square.side)

function changeValue(square)
    square.side = 7
    printf('square in changeValue contains side = %d\n", square.side)
```

The output of this example is shown here.

```
[before] square in main contains side = 5
square in changeValue contains side = 7
[after] square in main contains side = 7
```

In this example, a variable named `square` is assigned an instance of the `Square`
class. The value of the `side` field contained in the `square` object is assigned
`5`. It is then printed on the console. After which, Tthe `changeValue()` function
is invoked with `square` as its argument. Remember, the reference to the `square`
object is copied, not the object itself.

`changeValue()` receives the reference as the parameter named `square`.
It modifies the value of `side` contained in the `Square` object to `7`. After
which it prints out the value stored in it.

When the `changeValue()` function terminates, the control is again transferred to
`main()`, where the current value of `side` is printed. Since the
`changeValue()` was invoked with a copy of the reference, the `square` object
has been changed.