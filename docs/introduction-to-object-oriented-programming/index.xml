<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Object Oriented Programming on Zen</title>
    <link>https://itssamuelrowe.github.io/zen-website/introduction-to-object-oriented-programming/</link>
    <description>Recent content in Introduction to Object Oriented Programming on Zen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://itssamuelrowe.github.io/zen-website/introduction-to-object-oriented-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding Object Oriented Programming</title>
      <link>https://itssamuelrowe.github.io/zen-website/introduction-to-object-oriented-programming/understanding-object-oriented-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/introduction-to-object-oriented-programming/understanding-object-oriented-programming/</guid>
      <description>Object-oriented programming is a programming language paradigm or model. In this model, programs are organized around data, also known as objects. Zen is unlike languages such as C, a Procedural Oriented Language (POL), in which the programs are organized around functions and logic.
An object is simply data that has attributes and behavior.
An example of an object is a human being. A human being has properties like name, date of birth, and gender.</description>
    </item>
    
    <item>
      <title>Principles of Object Oriented Programming</title>
      <link>https://itssamuelrowe.github.io/zen-website/introduction-to-object-oriented-programming/principles-of-object-oriented-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/introduction-to-object-oriented-programming/principles-of-object-oriented-programming/</guid>
      <description>Object oriented programming is based on the following principles.
 Class Object Inheritance Abstraction Encapsulation Polymorphism  We will briefly discuss each of these principles in this section. In the next few chapters we will learn about them in detail with their applications in Zen.
Understanding Classes A class is a collection of objects of similar type. Once a class is defined, any number of instances can be created which belong to that class.</description>
    </item>
    
    <item>
      <title>Advantages of Object-Oriented Programming</title>
      <link>https://itssamuelrowe.github.io/zen-website/introduction-to-object-oriented-programming/advantages-of-object-oriented-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/introduction-to-object-oriented-programming/advantages-of-object-oriented-programming/</guid>
      <description>In this section, we will learn about the advantages of Object Oriented Programming (OOP).
Reusability Reusability allows us to reuse available facilities rather building it again and again. This is done with the use of a class. You can use it any number of times. Thus, your productivity is improved.
Maintenance Code maintainance is a necessity for any programming languages. Object Oriented Programming allows programmers to refactor code in many ways.</description>
    </item>
    
  </channel>
</rss>