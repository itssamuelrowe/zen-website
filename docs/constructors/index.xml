<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Constructors on Zen</title>
    <link>https://itssamuelrowe.github.io/zen-website/constructors/</link>
    <description>Recent content in Constructors on Zen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://itssamuelrowe.github.io/zen-website/constructors/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding this Keyword</title>
      <link>https://itssamuelrowe.github.io/zen-website/constructors/understanding-this-keyword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/constructors/understanding-this-keyword/</guid>
      <description>In the body of a function, constructor, or initializer block, sometimes you need to refer to the object that contains the instance member in question. In other words, sometimes an instance member may want to access the instance it is contained in. In such cases, you can refer the instance using the this keyword. It always represents the instance within which the instance member is contained.
To refer to the instance in an instance function, use the this keyword where you normally would refer to an object&amp;rsquo;s reference through a variable.</description>
    </item>
    
    <item>
      <title>Working with Constructors</title>
      <link>https://itssamuelrowe.github.io/zen-website/constructors/working-with-constructors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/constructors/working-with-constructors/</guid>
      <description>A constructor is a special function which initializes your variables and performs any other additional operations when you create an object. It is called whenever you create an object.
Here is the general form of a constructor.
function new(parameters) statement1 statement2 ... statementN  Here, the new keyword indicates that the function is a constructor. Constructors usually initialize values of fields.
You have already learnt about parameters in the previous chapter.</description>
    </item>
    
    <item>
      <title>Overloading Constructors</title>
      <link>https://itssamuelrowe.github.io/zen-website/constructors/overloading-constructors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/constructors/overloading-constructors/</guid>
      <description>A class can have multiple constructors, this achived through a technique known as constructor overloading. It is a feature of polymorphism and is a very useful feature. It is similar to function overloading.
Zen differentiates constructors using constructor signatures. A constructor signature is a part of constructor declaration. It is the combination of the new keyword and the parameter count. The names of the parameters are not included in the signature.</description>
    </item>
    
    <item>
      <title>Working with the Static Initializer</title>
      <link>https://itssamuelrowe.github.io/zen-website/constructors/working-with-the-static-initializer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/constructors/working-with-the-static-initializer/</guid>
      <description>Sometimes you may want to initialize your static fields after computing a value. A static initializer is a special block of code which initializes a class. It is written inside a class and outside function and constructors. You cannot assign a name or invoke a static initializer, at least directly.
It is executed whenever the class is loaded. The Zen Virtual Machine may unload a class when the class is unused to save memory.</description>
    </item>
    
  </channel>
</rss>