<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strings on Zen</title>
    <link>https://itssamuelrowe.github.io/zen-website/strings/</link>
    <description>Recent content in Strings on Zen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://itssamuelrowe.github.io/zen-website/strings/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding Strings</title>
      <link>https://itssamuelrowe.github.io/zen-website/strings/understanding-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/strings/understanding-strings/</guid>
      <description>In Zen, strings are not primitive reference types. Strings are implemented by the String class defined in the zen.core package. All strings are objects and Zen treats strings specially.
A string is a sequence of characters. You can create a string by enclosing your text in single quotes. The character sequence along with the single quotes form a string literal.
Unlike many other programming languages, string are not arrays of characters.</description>
    </item>
    
    <item>
      <title>Constructors of the String Class</title>
      <link>https://itssamuelrowe.github.io/zen-website/strings/constructors-of-the-string-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/strings/constructors-of-the-string-class/</guid>
      <description>The String class exposes many constructors. You will learn about a few of these constructors in this section. Please refer the Zen API documentation for more information.
Creating Empty Strings You can create an empty string by calling the default constructor. An empty string basically contains no characters.
Here is an example.
var emtpyString = new String()  Creating Strings From Array of Characters The String class implements a constructor which accepts an array of characters.</description>
    </item>
    
    <item>
      <title>Determining the Size of Strings</title>
      <link>https://itssamuelrowe.github.io/zen-website/strings/determining-the-size-of-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/strings/determining-the-size-of-strings/</guid>
      <description>You can determine the size of a string using the immutable size property. The size of a string is basically the number of code points it contains.
Here is an example which prints the size of a string.
// StringSize.zen function main(...arguments) var name = &#39;Shazam&#39; printf(&#39;The size of &amp;quot;%s&amp;quot; is %d.\n&#39;, name.size)  The example above produces the following output:
The size of &amp;quot;Shazam&amp;quot; is 6.  The size of a string is an important value when you want to manipulate strings.</description>
    </item>
    
    <item>
      <title>Comparing Strings</title>
      <link>https://itssamuelrowe.github.io/zen-website/strings/comparing-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/strings/comparing-strings/</guid>
      <description>String Equality You can compare two strings for equality using the equality operator (==). The behavior of the equality operator is overridden in the equals() function, which means you can use it to compare two strings for equality, too.
The declaration of the equals function is shown here.
function equals(other)  It returns true if both the strings contain the same characters in the same order; false otherwise. You need to remember that this function is case sensistive.</description>
    </item>
    
    <item>
      <title>Extracting Characters From Strings</title>
      <link>https://itssamuelrowe.github.io/zen-website/strings/extracting-characters-from-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/strings/extracting-characters-from-strings/</guid>
      <description>You can extract characters from strings in a number of ways. We discuss about each technique in this section.
Internally, strings store characters in an array. The String class overrides the subscript operator, which allows you to access characters in a string as if it were an array. Many functions in the String class require indexes to operate. Just like array, string indexes are zero based. So it would help you to understand strings better if you think of them as arrays.</description>
    </item>
    
  </channel>
</rss>