<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zen</title>
    <link>https://itssamuelrowe.github.io/zen-website/</link>
    <description>Recent content on Zen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://itssamuelrowe.github.io/zen-website/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advantages of Zen</title>
      <link>https://itssamuelrowe.github.io/zen-website/introduction-to-zen/advantages-of-zen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/introduction-to-zen/advantages-of-zen/</guid>
      <description>Zen is Simple Zen is easy to learn and use. It has a clear syntax. With a combination of powerful libraries, it makes tasks such as string manipulation and networking extremely easy. If you know the basics of object oriented programming, you can easily learn Zen.
Zen provides high-level collections such as lists, maps, sets, bags, queues, stacks, and so on. You do not need external libraries or hours of coding to use these collections.</description>
    </item>
    
    <item>
      <title>Comparing Zen to Other Programming Languages</title>
      <link>https://itssamuelrowe.github.io/zen-website/introduction-to-zen/comparing-zen-to-other-programming-languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/introduction-to-zen/comparing-zen-to-other-programming-languages/</guid>
      <description>In this lecture, we will compare Zen, Java, C and C++.
Paradigm Zen, Java and C++ are object-oriented programming languages. Whereas, C is procedural oriented programming (POP) language.
Memory Management All programming languages let you handle data. When you create a variable, you can assign a portion of the computer’s memory to store the data. The allocation of memory is a detail that you can usually ignore. But you need to know what happens to that memory when you no longer need the data that was stored in it.</description>
    </item>
    
    <item>
      <title>Disadvantages of Zen</title>
      <link>https://itssamuelrowe.github.io/zen-website/introduction-to-zen/disadvantages-of-zen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/introduction-to-zen/disadvantages-of-zen/</guid>
      <description>Like any programming language, Zen is not perfect.
Performance Zen programs are converted to bytecodes when compiled. During execution, these byte codes are interpreted by the virtual machine. Thus, Zen programs take longer time to run compared to programs written in C and C++. But this problem will soon be overcome with a Just-in-time Compiler (JIT).
Consumes More Memory This is one of the biggest problems in Zen. Zen takes more memory space than the other native programming languages like C and C++.</description>
    </item>
    
    <item>
      <title>What is Zen?</title>
      <link>https://itssamuelrowe.github.io/zen-website/introduction-to-zen/what-is-zen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/introduction-to-zen/what-is-zen/</guid>
      <description>Java is a general purpose programming language. It was created by Samuel Rowe. The initial development began in 2016.
Zen is similar to Java, Python, and C. So, if you have any experience with these languages, you will find Zen easy to learn. However, Zen is different in many significant ways.
Zen was designed to develop applications that are capable of running across multiple platforms. As of now, Zen is officially supported on all major platforms, in particular, Linux, Windows, and MacOS.</description>
    </item>
    
    <item>
      <title>Combing Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/combining-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/combining-operators/</guid>
      <description>The concepts explained in this section are very important. Do not worry if you find the concepts confusing. You can always come back and read the section later.
You can combine operators to form complex expessions. The order in which the operations are evaluated is determined by the precedence of the operators involved in the expression. For example, multiplication and division have a higher precedence than addition and subtraction.
Always remember, precedence rules can be overridden by explicit parentheses.</description>
    </item>
    
    <item>
      <title>Declaring Final Variables or Constants</title>
      <link>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/declaring-final-variables-or-constants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/declaring-final-variables-or-constants/</guid>
      <description>In this section, you will learn how to declare final variables or constants.
A final variable is variable that you cannot change after initializing. The compiler will generate errors if you try to change it. It is also called as a constant.
The basic form of a constant declaration statement is shown here.
final name = expression  The primary difference between declaring a variable and a constant is the use of final keyword.</description>
    </item>
    
    <item>
      <title>Declaring Variables</title>
      <link>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/declaring-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/declaring-variables/</guid>
      <description>In this lecture, you will learn how to declare variables.
You must declare a variable before using it. The compiler will display errors otherwise.
The basic form of a variable declaration statement is shown below.
var name  A variable name is an identifier. You can refer the value stored in the variable with its name.
Unlike other statically typed programming languages, you don&amp;rsquo;t have to write the type of values that can be stored in a variable.</description>
    </item>
    
    <item>
      <title>Nested If Statements</title>
      <link>https://itssamuelrowe.github.io/zen-website/conditional-statements/nested-if-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/conditional-statements/nested-if-statements/</guid>
      <description>You can write any statement under the if and else clauses. In fact, you could write another if statement under them. This is known as nesting. So, if you write an if statement inside another if statement, we call the arrangment as nested if statements.
The if statement written inside another if statement is called the inner if statement.
Similarly, the if statement which contains another if statement is called the outer if statement.</description>
    </item>
    
    <item>
      <title>Overriding Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/overriding-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/overriding-operators/</guid>
      <description>Zen allows operator overriding through a combination of functions and annotations.
All the operators in Zen are dispatched to a function call. The ZenKernel.evaluate(...) function finds a suitable handler for the operator defined within the operand object and dispatches it. In other words, the compiler translates expressions with operators to equivalent ZenKernel.evaluate(...) calls.
For example, in the HashMap class the following annotation overrides the subscript operator.
@Operator symbol=&#39;[]&#39; function getValue(key) .</description>
    </item>
    
    <item>
      <title>The Hello World Program</title>
      <link>https://itssamuelrowe.github.io/zen-website/basics-of-zen/the-hello-world-program/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/basics-of-zen/the-hello-world-program/</guid>
      <description>In this section, you will learn to write the Hello World program.
Many programming courses begin with a simple example program that prints the text, &amp;ldquo;Hello, world!&amp;rdquo; on the console.
function main(...arguments) print(&#39;Hello, world!&#39;)   Copy the source code from here. Paste the source code into a text editor, such as Notepad or Notepad++. Save it in a file named Hello.zen. You need to remember where you save your file.</description>
    </item>
    
    <item>
      <title>Types of Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/types-of-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/types-of-operators/</guid>
      <description>In this lecture, we&amp;rsquo;ll learn about the types of operators based on the number of operands they expect.
A common way to categorize Zen’s operators is by the number of operands the operator expect.
There are three types of operators based on the number of operands they accept.
 Unary Operators
 Binary Operators
 Ternary Operators
  Unary Operators Unary operators are operators that expect one operand.</description>
    </item>
    
    <item>
      <title>Understanding Data Types</title>
      <link>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/understanding-data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/understanding-data-types/</guid>
      <description>Zen is a dynamically typed programming language. What this means is, the compiler does not know the type of every variable. Once you declare a variable, it can hold values of any type. For example, a variable referencing an integer may be updated to reference a string without making the compiler complain.
The advantage of dynamically typed languages is that programs can be written quickly. On the other hand, the primary disadvantage of a dynamically typed language is that many bugs cannot be caught during compilation.</description>
    </item>
    
    <item>
      <title>Understanding Identifiers</title>
      <link>https://itssamuelrowe.github.io/zen-website/basics-of-zen/understanding-identifiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/basics-of-zen/understanding-identifiers/</guid>
      <description>Identifiers are the names you give to variables, methods, classes, annotations and enumerations. Unlike literals, identifiers only help you reference to something.
The program shown in the hello world example shown in the previous section uses three identifiers. * main * arguments * print
 Identifiers are case sensitive. For example, ArrayList with uppercase A and arrayList with lowercase a are two different identifiers. Identifiers may contain uppercase or lowercase letters, numerals, underscore characters _, and dollar symbols $.</description>
    </item>
    
    <item>
      <title>Understanding Keywords</title>
      <link>https://itssamuelrowe.github.io/zen-website/basics-of-zen/understanding-keywords/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/basics-of-zen/understanding-keywords/</guid>
      <description>A keyword is a special word whose meaning is defined by the Zen programming language specification. You cannot use these words as identifiers. All keywords are in lowercase.
Like everything else in Zen, keywords are case sensitive. For example, if you use For with uppercase F instead of for with lowercase f it is an error.
The hello world program shown in the beginning of this chapter use one keyword: function.</description>
    </item>
    
    <item>
      <title>Understanding Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/understanding-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/understanding-operators/</guid>
      <description>In this lecture, you will learn about operators.
An operator is a special symbol or a keyword that performs a mathemtical operation or a specific operation.
Generally, an operator expects one, two, or three values known as operands.
You must always remember, an operator always calculates and returns a result.</description>
    </item>
    
    <item>
      <title>Understanding Unicode</title>
      <link>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/understanding-unicode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/understanding-unicode/</guid>
      <description>This section describes Unicode and how Zen deals with it. It is a difficult concept to grasp. You can safely skip this section for now. You can come back when you are comfortable with Zen.
 To work with characters in a computer, you need the following:
* Character Repertoire
* Character Set
* Character Encoding
Understanding Characters Repertoire A character repertoire is a collection of characters your computer can work with.</description>
    </item>
    
    <item>
      <title>Understanding Variables</title>
      <link>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/understanding-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/understanding-variables/</guid>
      <description>In this section, you will learn about variables.
A variable is a place holder. A variable&amp;rsquo;s value can change when your program is running.
For exampe, you can store a value like 100 in a variable. After you store a value, you can store a different value in the variable whenever you want. When you store a new value in a variable, the old value is no longer there. In other words, the old value is replaced by the new value.</description>
    </item>
    
    <item>
      <title>Using If Statements</title>
      <link>https://itssamuelrowe.github.io/zen-website/conditional-statements/using-if-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/conditional-statements/using-if-statements/</guid>
      <description>The if statement is one of the most important statements in any programming language. The following sections describe the various forms of the if statement in Zen. Basically, the if statement allows your program to branch conditionally. It is a compound statement.
Here is the general form of the if statement.
if condition statement else statement  Here, a statement may be either a simple statement or a compound statement. The condition is any expression that evaluates to a Boolean value.</description>
    </item>
    
    <item>
      <title>Using If-Else-If Ladders</title>
      <link>https://itssamuelrowe.github.io/zen-website/conditional-statements/using-if-else-if-ladders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/conditional-statements/using-if-else-if-ladders/</guid>
      <description>A common programming construct based on a sequence if statements is the if-else-if ladder.
Here is the general form of an if-else-if ladder.
if condition1 statement1 else if condition2 statement2 else if condition3 statement3 else statement4  These ladders are basically a group of nested if statements. The if statements are executed from the top to down. As soon as one of the conditions associated with an if clause is true, then the statement associated with that if clause is executed, and the rest of the ladder is skipped.</description>
    </item>
    
    <item>
      <title>Using the Assignment Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-assignment-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-assignment-operators/</guid>
      <description>The assignment operator helps you assign a value to a variable. You have already seen many examples of this operator. It assigns the value on its right to the operand on its left.
For example, here&amp;rsquo;s an example of the assignment operator in use.
var vehicles var cars = 100 vehicles = cars  In the above example, we created a variable named vehicles. Think that it stores the number of vehicles you own.</description>
    </item>
    
    <item>
      <title>Using the Compound Assignment Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-compound-assignment-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-compound-assignment-operators/</guid>
      <description>A compound assignment operator is an operator that performs both an implicit calculation and an assignment.
Here&amp;rsquo;s a list of all the compound arithmetic assignment operators in Zen.
 Please note that the operators described in the table below are with respect to the Integer8, Integer16, Integer32, Integer64, Decimal32 and Decimal64 data types. For behavior specific to other data types, please refer the documentation.
    Operator Description     += Addition and assignment   -= Subtraction and assignment   *= Multiplication and assignment   /= Division (for quotient) and assignment   %= Division (for remainder) and assignment    For example, the expression a = a + 10 can be written as a += 10.</description>
    </item>
    
    <item>
      <title>Using the Conditional Operator</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-conditional-operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-conditional-operator/</guid>
      <description>The conditional operator is the only ternary operator in Zen. It is used to replace certain types of if-then-else statements. You will learn more about if statements later in the manual.
The conditional operator is represented by a question mark (?). It can seem somewhat confusing at first, but the conditional operator can be used very effectively once understood.
The conditional operator has the following general form.
expression1 ? expression2 : expression3  Here, expression1 can be any expression that evaluates to a boolean value.</description>
    </item>
    
    <item>
      <title>Using the Logical Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-logical-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-logical-operators/</guid>
      <description>You can combine two or more conditions or constraints or complement with logical operators. The result of the operation of a logical operator is a Boolean value, either true or false.
Logical AND Operator The logical AND operator combines two Boolean expressions and returns true if both the expressions evaluate to true. Otherwise, it returns false for the given expressions.
The general form of the logical AND operator is shown here.</description>
    </item>
    
    <item>
      <title>Using the Unary Plus and Minus Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-unary-plus-and-minus-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/using-the-unary-plus-and-minus-operators/</guid>
      <description>Please note that the operators described in this section are with respect to the Integer8, Integer16, Integer32, Integer64, Decimal32 and Decimal64 data types. For behavior specific to other data types, please refer the documentation.
 The unary plus and minus operators let you change the sign of an operand.
Note that the symbol used to represent these operators are the same as the addition and subtraction operators. The compiler figures out which operation you mean by examining the expression.</description>
    </item>
    
    <item>
      <title>What is a Loop?</title>
      <link>https://itssamuelrowe.github.io/zen-website/loop-statements/what-is-a-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/loop-statements/what-is-a-loop/</guid>
      <description>Repeating things over and over is referred to as looping. The iteration statements in Zen help you create loops in your programs. These statements allow a segment of your code to repeat a given number of times.
As an example of a loop, consider yourself watching a series like Breaking Bad. * Find the next episode to watch. * Watch the episode. * Repeat.
This simple example contains a loop. The loop is based on the &amp;ldquo;Repeat&amp;rdquo; instruction, which tells you that the entire sequence of steps repeats itself.</description>
    </item>
    
    <item>
      <title>Working with Arithmetic Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/working-with-arithmetic-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/working-with-arithmetic-operators/</guid>
      <description>In this section, you will learn about the arithmetic operators in Zen.
 Please note that the operators described in this section are with respect to the Integer8, Integer16, Integer32, Integer64, Decimal32 and Decimal64 data types. For behavior specific to other data types, please refer the documentation.
 You can perform addition, subtraction, multiplication, and division with the arithmetic operators. They are similar to operators in basic mathematics.
   Operator Description     + Addition   - Subtraction   * Multiplication   / Division (returns quotient)   % Division (returns remainder)    Addition The addition operator, written as plus + accepts two operands.</description>
    </item>
    
    <item>
      <title>Working with Bitwise Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/working-with-bitwise-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/working-with-bitwise-operators/</guid>
      <description>Please note that the operators described in this section are with respect to the Integer8, Integer16, Integer32, Integer64, Decimal32 and Decimal64 data types. For behavior specific to other data types, please refer the documentation.
 A computer stores data in binary. In other words, information is encoded as a sequence of 1&amp;rsquo;s and 0&amp;rsquo;s. On most computers, the memory is organized into 8-bit cells known as bytes.
Zen defines several operators that allow you to work at the binary level.</description>
    </item>
    
    <item>
      <title>Working with Blocks</title>
      <link>https://itssamuelrowe.github.io/zen-website/basics-of-zen/working-with-blocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/basics-of-zen/working-with-blocks/</guid>
      <description>A block is a group of one or more statements. It is also known as a statement suite. It is a type of statement, a compound statement to be specific. It begins when the indentation of the first statement of the block is greater than the indentation of its containing block. Subsequent statements with the same indentation as that of the first statement are grouped together in the block.
You can write any number of statements, including block statements, in a block.</description>
    </item>
    
    <item>
      <title>Working with Comments</title>
      <link>https://itssamuelrowe.github.io/zen-website/basics-of-zen/working-with-comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/basics-of-zen/working-with-comments/</guid>
      <description>Comments are texts that are ignored by the compiler. They help you write information or explanation about your code. You can use comments to hide a part of your code.
We recommend you to use plenty of comments in your source code.
Types of Comments There are 3 types of comments in Zen.
 Single Line Comment Multi-Line Comment Documentation Comment  Single Line Comments A single line comment begins with // and ends at the end of the line.</description>
    </item>
    
    <item>
      <title>Working with Comparison Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/working-with-comparison-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/working-with-comparison-operators/</guid>
      <description>In this section, you will learn about the comparison operators in Zen.
   Operator Description     &amp;lt; Lesser than   &amp;gt; Greater than   &amp;lt;= Lesser than or equal   &amp;gt;= Greater than or equal    Lesser Returns true if the operand on the left is lesser than the operand on the right.
Greater Returns true if the operand on the left is greater than the operand on the right.</description>
    </item>
    
    <item>
      <title>Working with Equality Operators</title>
      <link>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/working-with-equality-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/operators-operands-and-expressions/working-with-equality-operators/</guid>
      <description>In this section, you will learn about the equality operators in Zen.
   Operator Description     == Equality   != Inequality    Equality Returns true if the operand on the left is the same as the operand on the right. Please note that this operator compares the content of the left operand with the content of the right operand, along with the references.</description>
    </item>
    
    <item>
      <title>Working with Non-Primitive Reference Types</title>
      <link>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/working-with-non-primitive-reference-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/working-with-non-primitive-reference-types/</guid>
      <description>In this section, you will learn about the basics of non-primitive reference types. You learn to create variables that work with objects.
The rules that apply to these types also apply to primitive reference types.
 You will learn more about classes and objects later in the course.
 Zen programs are built with classes. You can use classes to create objects. A class can either be a part of the Zen standard API or a class that you create.</description>
    </item>
    
    <item>
      <title>Working with Primitive Reference Types</title>
      <link>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/working-with-primitive-reference-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/working-with-primitive-reference-types/</guid>
      <description>The primitive types are the most basic data types available in the Zen Virtual Machine.
There are eight primitive data types defined by the Zen Virtual Machine.
* boolean
* char
* integer8
* integer16
* integer32
* integer64
* decimal32
* decimal64
The primitive types are not reference types. Since the Zen programming language supports only primitive types, it adds wrappers around these primitive types through wrapper classes.</description>
    </item>
    
    <item>
      <title>Working with Statements</title>
      <link>https://itssamuelrowe.github.io/zen-website/basics-of-zen/working-with-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/basics-of-zen/working-with-statements/</guid>
      <description>Statements are similar to sentences in the English language. A statement tells Zen to perform an action. It can include one or more expressions.
There are two types of statements in Zen: * Simple Statement * Compound Statement
Understanding Simple Statements Simple statements are the actions your program performs.
 Assertion Statement Break Statement Continue Statement Empty Statement Expression Statement Return Statement and Throw Statement  A simple statement always ends with a newline.</description>
    </item>
    
    <item>
      <title>Working with Strings</title>
      <link>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/working-with-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/zen-website/variables-values-and-data-types/working-with-strings/</guid>
      <description>In this section, you will learn the basics of strings.
A string is a sequence of characters. String literals are enclosed in single quotes (&#39;).
Here&amp;rsquo;s an example of a string.
&#39;Hello, world!&#39;  The Zen Virtual Machine does not define string as a primitive type. Further, the Zen programming language treats strings specially and classifies a string as primitive reference type. It is implemented by the zen.core.String class.</description>
    </item>
    
  </channel>
</rss>